// --- ELEMENTS ---
const startBtn = document.getElementById("start-btn");
const gameArea = document.getElementById("game-area");
const scoreEl = document.getElementById("score");
const reactionEl = document.getElementById("reaction");
const infoEl = document.getElementById("info");

// --- CONFIG VARIABLES ---
const TOTAL_LEVELS = 2; // Total levels
const START_ARROW_TIME = 2000; // Arrow visible time in ms
const ARROW_TIME_DECREASE = 150; // Arrow time decrease per level
const MIN_DELAY = 0; // Min delay before next arrow
const MAX_DELAY = 300; Â // Max delay before next arrow
const FAIL_MESSAGE_DURATION = 1500; // How long to show the failure message in ms

// --- GAME STATE ---
let level = 1;
let arrowTime = START_ARROW_TIME;
let arrow;
let appearTime;
let reactionTimes = [];
let arrowTimeout;

// --- HELPERS ---

// Assuming the 'arrow' div is 40px by 40px based on the original subtraction value.
const ARROW_SIZE = 40; 

function randomPosition() {
    // Calculate the maximum coordinate where the top-left corner of the arrow can be placed
    // without the arrow extending outside the gameArea.
    
    // Ensure the result is not negative (in case gameArea is tiny)
    const maxX = Math.max(0, gameArea.clientWidth - ARROW_SIZE);
    const maxY = Math.max(0, gameArea.clientHeight - ARROW_SIZE);
    
    const x = Math.random() * maxX;
    const y = Math.random() * maxY;
    
    // The previous code:
    // const x = Math.random() * (gameArea.clientWidth - 40);
    // const y = Math.random() * (gameArea.clientHeight - 40);
    // Was mostly correct, but using a constant makes it clearer what '40' represents.
    
    return { x, y };
}

function randomDelay() {
Â return MIN_DELAY + Math.random() * (MAX_DELAY - MIN_DELAY);
}

// --- POPUP FOR WINNING ---
function showWinPopup(avgTime) {
Â // Blur the game area
Â gameArea.style.filter = "blur(5px)";
Â startBtn.style.display = "none";

Â const overlay = document.createElement("div");
Â overlay.id = "overlay";
Â overlay.style.position = "fixed";
Â overlay.style.top = 0;
Â overlay.style.left = 0;
Â overlay.style.width = "100%";
Â overlay.style.height = "100%";
Â overlay.style.background = "rgba(0,0,0,0.5)";
Â overlay.style.zIndex = "999";
Â document.body.appendChild(overlay);

Â const popup = document.createElement("div");

Â popup.id = "win-popup";

Â popup.style.position = "fixed";

Â popup.style.top = "50%";

Â popup.style.left = "50%";

Â popup.style.transform = "translate(-50%, -50%)";

Â popup.style.background = "#0b132b";

Â popup.style.padding = "30px";

Â popup.style.borderRadius = "10px";

Â popup.style.boxShadow = "0 0 20px rgba(0,0,0,0.5)";

Â popup.style.textAlign = "center";

Â popup.style.zIndex = "1000";

Â popup.style.color = "#fff";



Â popup.innerHTML = `

Â <h2>ðŸŽ‰ You won the game! ðŸŽ‰</h2>

Â <p>Average Reaction Time: ${Math.round(avgTime)} ms</p>

Â <button id="restart-btn">Restart Game</button>

Â `;

Â document.body.appendChild(popup);



Â // Restart button
Â document.getElementById("restart-btn").onclick = () => {
Â popup.remove();
Â overlay.remove();
Â gameArea.style.filter = "none";
Â startBtn.style.display = "inline-block";
Â startBtn.disabled = false;

Â // Restart on the same page
Â resetGame();
Â 
Â // Set the info text for a fresh start state
Â infoEl.textContent = `Click "Start Game" to begin Level 1.`;
Â startBtn.textContent = `Start Game`;
Â };
}

// --- GAME LOGIC ---
function showArrow() {
Â if (arrow) arrow.remove();

Â const { x, y } = randomPosition();
Â arrow = document.createElement("div");
Â arrow.className = "arrow";
Â arrow.textContent = "ðŸ¦Š";
Â arrow.style.left = `${x}px`;
Â arrow.style.top = `${y}px`;
Â gameArea.appendChild(arrow);

Â appearTime = Date.now();
Â let clicked = false;

// Click handler
Â arrow.onclick = () => {
Â if (clicked) return;
Â clicked = true;
Â clearTimeout(arrowTimeout);
Â const reaction = Date.now() - appearTime;
Â reactionTimes.push(reaction);
Â scoreEl.textContent = `Level ${level} âœ…`;
Â reactionEl.textContent = `Reaction Time: ${reaction} ms`;
Â arrow.remove();
Â nextLevel();
Â };

Â // Timeout if not clicked
Â arrowTimeout = setTimeout(() => {
Â if (!clicked) {
Â reactionTimes.push(arrowTime); // penalty

Â // 1. Display the failure message.
Â infoEl.textContent = `â›” You missed Level ${level}. Starting over!`;

Â // 2. Remove the missed arrow.
Â if (arrow) arrow.remove();

Â // 3. Delay the state reset to allow the user to read the message.
Â setTimeout(() => {
Â // Reset the game display elements to a 'waiting' state
Â scoreEl.textContent = `Level 0`;
Â reactionEl.textContent = `Reaction Time: â€”`;

Â // Re-enable the start button and set its text for a fresh start
Â startBtn.disabled = false;
Â startBtn.textContent = `Start Game`; 
Â 
Â // Display the initial instructions/waiting message
Â infoEl.textContent = `Click "Start Game" to begin Level 1.`; 
Â 
Â // Finally, reset the game state variables
Â level = 1;
Â arrowTime = START_ARROW_TIME;
Â reactionTimes = [];
Â }, FAIL_MESSAGE_DURATION);
Â }
Â }, arrowTime);
}

function nextLevel() {
Â level++;
Â if (level > TOTAL_LEVELS) {
Â  // Player won
Â const avg = reactionTimes.reduce((a, b) => a + b, 0) / reactionTimes.length;
Â showWinPopup(avg);
Â return;
}

Â // Increase difficulty
Â arrowTime = Math.max(200, arrowTime - ARROW_TIME_DECREASE);

Â infoEl.textContent = `Level ${level} â€” Get ready!`;
Â startBtn.disabled = true;

Â setTimeout(showArrow, randomDelay());
}

// --- RESET GAME ---
function resetGame() {
Â level = 1;
Â arrowTime = START_ARROW_TIME;
Â reactionTimes = [];
Â scoreEl.textContent = `Level 0`;
Â reactionEl.textContent = `Reaction Time: â€”`;
}

// --- START BUTTON ---
startBtn.onclick = () => {
Â resetGame();
Â startBtn.disabled = true;
Â startBtn.textContent = `Starting...`;
Â infoEl.textContent = `Level ${level} â€” Get ready!`; // Set info for game start
Â setTimeout(showArrow, 500); // small start delay
};
